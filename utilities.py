from flask import Response
import json
import traceback

DefaultArgs = [
    { 'name': 'validation', 'default': True },
    { 'name': 'validationcase', 'default': 'DiFranco2016' },
    { 'name': 'dronename', 'default': 'dji-Mavic2' },
    { 'name': 'batterytechnology', 'default': 'near-future'},
    { 'name': 'stateofhealth', 'default': 90.0 },
    { 'name': 'startstateofcharge', 'default': 100.0 },
    { 'name': 'altitude', 'default': 100.0 },
    { 'name': 'dropsize', 'default': 1.0 },
    { 'name': 'liquidwatercontent', 'default': 1.0 },
    { 'name': 'temperature', 'default': 15.0 },
    { 'name': 'windspeed', 'default': 10.0 },
    { 'name': 'winddirection', 'default': 0.0 },
    { 'name': 'relativehumidity', 'default': 0.0 },
    { 'name': 'timestep', 'default': 1 },
    { 'name': 'plot', 'default': False },
    { 'name': 'xlabel', 'default': "missionspeed" },
    { 'name': 'ylabel', 'default': "power" },
    { 'name': 'title', 'default': "First_test" },
    { 'name': 'simulationtype', 'default': "simple" },
    { 'name': 'weathereffect', 'default': "temperature" }
]

ParamMap = [
    { 'param': 'id', 'display': 'Drone Name' },
    { 'param': 'wingtype', 'display': 'Wing Type' },
    { 'param': 'diagonal', 'display': 'Diagonal' },
    { 'param': 'takeoffweight', 'display': 'Takoff Weight' },
    { 'param': 'speedmax', 'display': 'Max Speed' },
    { 'param': 'altitudemax', 'display': 'Max Altitude' },
    { 'param': 'endurancemax', 'display': 'Max Endurance' },
    { 'param': 'endurancemaxspeed', 'display': 'Max Endurace Speed' },
    { 'param': 'endurancemaxhover', 'display': 'Max Hover Endurance' },
    { 'param': 'rangemax', 'display': 'Max Range' },
    { 'param': 'rangemaxspeed', 'display': 'Max Range Speed' },
    { 'param': 'tiltanglemax', 'display': 'Max Tilt Angle' },
    { 'param': 'temperaturemin', 'display': 'Min Temperature' },
    { 'param': 'chargerpowerrating', 'display': 'Charge Power Rating' },
    { 'param': 'batterytype', 'display': 'Battery Type' },
    { 'param': 'batterycapacity', 'display': 'Battery Capacity' },
    { 'param': 'batteryvoltage', 'display': 'Battery Voltage' },
    { 'param': 'batterycells', 'display': 'Battery Cell Count' },
    { 'param': 'batteryenergy', 'display': 'Battery Energy' },
    { 'param': 'batterymass', 'display': 'Battery Mass' },
    { 'param': 'waterproof', 'display': 'Waterproof' },
    { 'param': 'windspeedmax', 'display': 'Max Windspeed' },
    { 'param': 'batteryrechargetime', 'display': 'Battery Recharge Time' },
    { 'param': 'rotorquantity', 'display': 'Rotor Quantity' },
    { 'param': 'rotordiameter', 'display': 'Rotor Diameter' },
    { 'param': 'cruisespeed', 'display': 'Cruise Speed' },
    { 'param': 'payload', 'display': 'Payload' },
    { 'param': 'length', 'display': 'Length' },
    { 'param': 'width', 'display': 'Width' },
    { 'param': 'height', 'display': 'Height' },
    { 'param': 'frontalarea', 'display': 'Frontal Area' },
    { 'param': 'toparea', 'display': 'Top Area' },
    { 'param': 'endurancemaxrange', 'display': 'Max Edurance Range' },
    { 'param': 'rotorarea', 'display': 'Rotor Area' },
    { 'param': 'totalweight', 'display': 'Total Weight' },
    { 'param': 'capacity', 'display': 'Capacity' },
    { 'param': 'soc', 'display': 'State of Charge' },
    { 'param': 'startsoc', 'display': 'Initial State of Charge' },
    { 'param': 'soh', 'display': 'State of Health' },
    { 'param': 'voltage', 'display': 'Voltage' },
    { 'param': 'voltagemean', 'display': 'Mean Voltage' },
    { 'param': 'voltagecharged', 'display': 'Charged Voltage' },
    { 'param': 'voltagedead', 'display': 'Dead Voltage' },
    { 'param': 'current', 'display': 'Current' },
    { 'param': 'batterytechnology', 'display': 'Battery Technology' },
    { 'param': 'efficiencypropulsive', 'display': 'Propulsive Efficiency' },
    { 'param': 'power', 'display': 'Power' },
    { 'param': 'dragcoefficient', 'display': 'Drag Coefficient' },
    { 'param': 'alpha', 'display': 'Alpha' },
    { 'param': 'area', 'display': 'Area' },
    { 'param': 'velocityinducedhover', 'display': 'Rotor Induced Velocity (hover)' },
    { 'param': 'velocityinduced', 'display': 'Induced Velocity' },
    { 'param': 'thrust', 'display': 'Thrust' },
    { 'param': 'alpha_gekko', 'display': 'Alpha (Gekko)' },
    { 'param': 'drag', 'display': 'Drag' },
    { 'param': 'bladeprofilepower', 'display': 'Blade Power Profile' },
    { 'param': 'airdensity', 'display': 'Air Density' },
    { 'param': 'airdensitysealevel', 'display': 'Air Density At Sea Level' },
    { 'param': 'gravitationconstant', 'display': 'Gravitational Constant' },
    { 'param': 'temperaturesealevel', 'display': 'Temperature At Sea Level' },
    { 'param': 'temperature', 'display': 'Temperature' },
    { 'param': 'humidity', 'display': 'Humidity' },
    { 'param': 'altitude', 'display': 'Altitude' },
    { 'param': 'relativehumidity', 'display': 'Relative Humidity' },
    { 'param': 'missionspeed', 'display': 'Mission Speed' },
    { 'param': 'heading', 'display': 'Heading' },
    { 'param': 'simulationtype', 'display': 'Simulation Type' },
    { 'param': 'timestep', 'display': 'Time Step' },
    { 'param': 'clock', 'display': 'Clock' },
    { 'param': 'counter', 'display': 'Counter' },
    { 'param': 'range', 'display': 'Range' },
    { 'param': 'endurance', 'display': 'Endurance' },
]

def handleError(err: Exception):
    print('Internal Error')
    print(err, type(err))
    traceback.print_tb(err.__traceback__)
    msg = {
        'error': True,
        'msg': 'An internal error has occured'
    }
    resp = Response(json.dumps(msg))
    return resp